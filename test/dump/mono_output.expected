package Mono


step if_trip (a : (bool * (bool * bool))) --> (b : bool)
{
  b : bool = if fst_2 (a) then fst (id (snd_2 (a))) else snd (snd_2 (a))
}

step add (a : (int * int)) --> (b : int)
{
  b : int = fst_1 (a) + snd_1 (a)
}

step if_tup (c : bool, t : (bool * bool)) --> (o : bool)
{
  o : bool = if c then fst (t) else snd (t)
}

step snd (a : (bool * bool)) --> (b : bool)
{
  _ : bool, b : bool = id (a)
}

step fst (a : (bool * bool)) --> (b : bool)
{
  b : bool, _ : bool = id (a)
}

step id (a : bool) --> (b : bool)
{
  b : bool = a
}